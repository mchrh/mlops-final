name: Deploy MLOps Application

on:
  push:
    branches: [ master ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: comprehend-api
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./src/api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      working-directory: ./infrastructure/terraform
      run: terraform init

    - name: Terraform Apply and Get IP
      working-directory: ./infrastructure/terraform
      id: terraform
      run: |
        terraform apply -auto-approve
        # Utiliser la nouvelle syntaxe pour les variables d'environnement GitHub
        echo "instance_ip=$(terraform output -raw server_public_ip)" >> "$GITHUB_ENV"

    - name: Debug IP
      run: |
        echo "Using IP: ${{ env.instance_ip }}"
        if [ -z "${{ env.instance_ip }}" ]; then
          echo "Error: IP is empty"
          exit 1
        fi

    - name: Decode SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > private_key.pem
        chmod 600 private_key.pem

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.instance_ip }}
        username: ubuntu
        key_path: ./private_key.pem
        script: |
          cd /home/ubuntu
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker-compose pull
          docker-compose up -d